/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package finanfx.frm;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import finanfx.data.DatabaseConnection;
import finanfx.dao.Transaccion;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import finanfx.models.Transacciones;


/**
 *
 * @author Ander
 */
public class frmTransacciones extends javax.swing.JPanel {

    /**
     * Creates new form frmTransacciones
     */
    public frmTransacciones() throws SQLException {
        initComponents();
    }
    
    private void clearData(){
        txtIDTransacction.setText("");
        txtIDUser.setText("");
        jcbTransactionType.setSelectedIndex(0);
        txtDate.setText("");
        txtAmount.setText("");
        jcbCategories.setSelectedIndex(0);
        jcbPaymentMethod.setSelectedIndex(0);
        txtDescription.setText("");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtAmount = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtIDTransacction = new javax.swing.JTextField();
        txtIDUser = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jcbTransactionType = new javax.swing.JComboBox<>();
        jcbCategories = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        btnClean = new javax.swing.JButton();
        jcbPaymentMethod = new javax.swing.JComboBox<>();
        txtDate = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setBackground(new java.awt.Color(255, 255, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(540, 470));

        jLabel8.setText("Forma de pago");

        jLabel5.setText("Fecha");

        txtDescription.setMinimumSize(new java.awt.Dimension(450, 450));
        txtDescription.setPreferredSize(new java.awt.Dimension(450, 450));
        txtDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescriptionActionPerformed(evt);
            }
        });

        btnSave.setText("Guardar");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel7.setText("Categoria");

        jLabel2.setText("Tipo de transaccion");

        jLabel3.setText("Cantidad");

        jLabel6.setText("Descripción");

        btnUpdate.setText("Editar");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Eliminar");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmountActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Transacciones");

        txtIDUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDUserActionPerformed(evt);
            }
        });

        jLabel4.setText("ID transaccion");

        jLabel9.setText("ID usuario");

        jcbTransactionType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una opcion", "Deposito Bancario", "Transferencia Bancaria", "Pago de servicios", "Cobro de salario", "Transferencia 365", "Recarga de celular", "Otro" }));

        jcbCategories.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---- Seleccione una opcion ----", "Alimentación", "Vivienda", "Transporte", "Entretenimiento", "Salud", "Educación", "Servicios públicos", "Ropa", "Viajes", "Ahorros e inversiones" }));

        btnSearch.setText("Buscar");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnClean.setText("Limpiar");
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        jcbPaymentMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---- Seleccione una opcion ----", "Efectivo", "Tarjeta", "Cheque" }));

        jLabel10.setText("Ingrese la fecha (yyyy-mm-dd)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(417, 417, 417))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(57, 57, 57)
                                .addComponent(jLabel10))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtIDUser, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtIDTransacction, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcbTransactionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch))
                            .addComponent(jcbPaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(btnSave)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete)
                                .addGap(18, 18, 18)
                                .addComponent(btnClean))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch)
                            .addComponent(txtIDTransacction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIDUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbTransactionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbPaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnClean))
                .addGap(68, 68, 68))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String idUserStr = txtIDUser.getText();
        String transactionType = (String) jcbTransactionType.getSelectedItem();
        String amountStr = txtAmount.getText();
        String dateStr = txtDate.getText();
        String category = (String) jcbCategories.getSelectedItem();
        String paymentMethod = (String) jcbPaymentMethod.getSelectedItem();
        String description = txtDescription.getText();

        // Validar que los campos no estén vacíos
        if (idUserStr.isEmpty() || transactionType.isEmpty() || amountStr.isEmpty() || dateStr.isEmpty() || category.isEmpty() || paymentMethod.isEmpty() || description.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.");
            return;
        }

        try
        {
            java.sql.Date Fecha = null;
            // Crear un objeto Transacciones con los datos del formulario
            Transacciones transaction = new Transacciones(WIDTH, transactionType, WIDTH, Fecha, category, description, description);
            transaction.setID_Usuario(Integer.parseInt(idUserStr));
            transaction.setTipo_Transaccion(transactionType);
            transaction.setCantidad(Double.parseDouble(amountStr));
            transaction.setFecha(java.sql.Date.valueOf(dateStr));
            transaction.setCategoria(category);
            transaction.setDescripcion(description);
            transaction.setForma_Pago(paymentMethod);

            // Llamar al método saveTransaction del DAO
            Transaccion.saveTransaction(transaction);

            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(this, "Transacción guardada con éxito");

            // Limpiar los campos del formulario
            txtIDUser.setText("");
            jcbTransactionType.setSelectedIndex(-1); // Seleccionar nada
            txtAmount.setText("");
            txtDate.setText("");
            jcbCategories.setSelectedIndex(-1); // Seleccionar nada
            txtDescription.setText("");
            jcbPaymentMethod.setSelectedIndex(-1); // Seleccionar nada

        } catch (SQLException ex)
        {
            // Manejar la excepción
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar la transacción: " + ex.getMessage());
        } catch (NumberFormatException ex)
        {
            // Manejar excepción si el formato de algún número es incorrecto
            JOptionPane.showMessageDialog(this, "Por favor, ingrese valores numéricos válidos.");
        } catch (IllegalArgumentException ex)
        {
            // Manejar excepción si la fecha no es válida
            JOptionPane.showMessageDialog(this, "Por favor, ingrese una fecha válida en formato YYYY-MM-DD.");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String idUserStr = txtIDUser.getText();
        String transactionType = (String) jcbTransactionType.getSelectedItem();
        String amountStr = txtAmount.getText();
        String dateStr = txtDate.getText();
        String category = (String) jcbCategories.getSelectedItem();
        String paymentMethod = (String) jcbPaymentMethod.getSelectedItem();
        String description = txtDescription.getText();
        
        if(idUserStr.isEmpty() || transactionType.isEmpty() || amountStr.isEmpty() || dateStr.isEmpty() || category.isEmpty() || paymentMethod.isEmpty() || description.isEmpty()){
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.");
            return;
        }
        
        try{
            java.sql.Date Fecha = null;
            Transacciones transaction = new Transacciones(WIDTH, transactionType, WIDTH, Fecha, category, description, description);
            transaction.setID_Usuario(Integer.parseInt(idUserStr));
            transaction.setTipo_Transaccion(transactionType);
            transaction.setCantidad(Double.parseDouble(amountStr));
            transaction.setFecha(java.sql.Date.valueOf(dateStr));
            transaction.setDescripcion(description);
            transaction.setForma_Pago(paymentMethod);
            
            Transaccion.updateTransaction(transaction);
            
            JOptionPane.showMessageDialog(this, "Transacción actualizada con éxito");
        }catch (SQLException ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al actualizar la transacción: "+ex.getMessage());
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Por favor, ingrese valores numéricos válidos.");
        }catch(IllegalArgumentException ex){
            JOptionPane.showMessageDialog(this, "Por favor, ingrese una fecha válida en formato YYYY-MM-DD.");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescriptionActionPerformed

    private void txtIDUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDUserActionPerformed

    private void txtAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmountActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchTransactionIDStr = txtIDTransacction.getText();
        if(searchTransactionIDStr.isEmpty()){
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de transacción.");
            return;
        }
        try{
            int searchTransactionID = Integer.parseInt(searchTransactionIDStr);
            
            Transacciones[] transactions = Transaccion.listTransactions(searchTransactionID);
            
            if(transactions.length > 0){
                
                Transacciones transaction = transactions[0];
                
                txtIDTransacction.setText(String.valueOf(transaction.getID_Transaccion()));
                txtIDUser.setText(String.valueOf(transaction.getID_Usuario()));
                jcbTransactionType.setSelectedItem(transaction.getTipo_Transaccion());
                txtDate.setText(transaction.getFecha().toString());
                txtAmount.setText(String.valueOf(transaction.getCantidad()));
                jcbCategories.setSelectedItem(transaction.getCategoria());
                txtDescription.setText(transaction.getDescripcion());
                jcbPaymentMethod.setSelectedItem(transaction.getForma_Pago());
                
                JOptionPane.showMessageDialog(this, "Transacción encontrada.");
            }else{
                JOptionPane.showMessageDialog(this, "No se encontró ninguna transacción con ese ID.");
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de transacción válido.");
        }catch(SQLException ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar la transacción: " +ex.getMessage());
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        txtIDTransacction.setText("");
        txtIDUser.setText("");
        jcbTransactionType.setSelectedIndex(0);
        txtDate.setText("");
        txtAmount.setText("");
        jcbCategories.setSelectedIndex(0);
        jcbPaymentMethod.setSelectedIndex(0);
        txtDescription.setText("");
    }//GEN-LAST:event_btnCleanActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String idTransactionStr = txtIDTransacction.getText();
        
        if(idTransactionStr.isEmpty()){
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID de la transacción a eliminar.");
            return;
        }
        
        try{
            int idTransaction = Integer.parseInt(idTransactionStr);
            
            int response = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar esta transacción?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
            
            if(response == JOptionPane.YES_OPTION){
                Transaccion.deleteTransactions(idTransaction);
                
                JOptionPane.showMessageDialog(this, "Transacción eliminada con éxito");
                
                clearData();
            }
        }catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de transacción válido.");
        }catch (SQLException ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al eliminar la transacción: "+ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> jcbCategories;
    private javax.swing.JComboBox<String> jcbPaymentMethod;
    private javax.swing.JComboBox<String> jcbTransactionType;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtIDTransacction;
    private javax.swing.JTextField txtIDUser;
    // End of variables declaration//GEN-END:variables

    private static class dateChooser {

        public dateChooser() {
        }
    }
}
